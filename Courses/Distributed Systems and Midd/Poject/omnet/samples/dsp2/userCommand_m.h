//
// Generated file, do not edit! Created by opp_msgc 4.1 from userCommand.msg.
//

#ifndef _USERCOMMAND_M_H_
#define _USERCOMMAND_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>userCommand.msg</tt> by opp_msgc.
 * <pre>
 * enum DSP2_USER_COMMAND_TYPES{
 * 	DSP2_USER_SET_BROKER = 0;
 * 	DSP2_USER_SUBSCRIBE_COMMAND = 1;
 * 	DSP2_USER_UNSUBSCRIBE_COMMAND = 2;
 * 	DSP2_USER_PUBLISH_COMMAND = 3;
 * };
 * </pre>
 */
enum DSP2_USER_COMMAND_TYPES {
    DSP2_USER_SET_BROKER = 0,
    DSP2_USER_SUBSCRIBE_COMMAND = 1,
    DSP2_USER_UNSUBSCRIBE_COMMAND = 2,
    DSP2_USER_PUBLISH_COMMAND = 3
};

/**
 * Class generated from <tt>userCommand.msg</tt> by opp_msgc.
 * <pre>
 * message UserCommand {
 *     int cmdType @enum(DSP2_USER_COMMAND_TYPES);
 *     int broker;
 *     string topic;
 *     string content;
 * }
 * </pre>
 */
class UserCommand : public ::cMessage
{
  protected:
    int cmdType_var;
    int broker_var;
    opp_string topic_var;
    opp_string content_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UserCommand&);

  public:
    UserCommand(const char *name=NULL, int kind=0);
    UserCommand(const UserCommand& other);
    virtual ~UserCommand();
    UserCommand& operator=(const UserCommand& other);
    virtual UserCommand *dup() const {return new UserCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCmdType() const;
    virtual void setCmdType(int cmdType_var);
    virtual int getBroker() const;
    virtual void setBroker(int broker_var);
    virtual const char * getTopic() const;
    virtual void setTopic(const char * topic_var);
    virtual const char * getContent() const;
    virtual void setContent(const char * content_var);
};

inline void doPacking(cCommBuffer *b, UserCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UserCommand& obj) {obj.parsimUnpack(b);}


#endif // _USERCOMMAND_M_H_
