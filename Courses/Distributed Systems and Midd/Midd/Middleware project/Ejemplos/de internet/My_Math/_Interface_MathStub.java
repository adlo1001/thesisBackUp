package My_Math;


/**
* My_Math/_Interface_MathStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from Math.idl
* jeudi 22 août 2002 19 h 49 CEST
*/

public class _Interface_MathStub extends org.omg.CORBA.portable.ObjectImpl implements My_Math.Interface_Math
{

  public My_Math.Result addition (My_Math.My_Array a, int line_a, int row_a, My_Math.My_Array b, int line_b, int row_b)
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("addition", true);
       My_Math.My_ArrayHelper.write ($out, a);
       $out.write_long (line_a);
       $out.write_long (row_a);
       My_Math.My_ArrayHelper.write ($out, b);
       $out.write_long (line_b);
       $out.write_long (row_b);
       $in = _invoke ($out);
       My_Math.Result $result = My_Math.ResultHelper.read ($in);
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return addition (a, line_a, row_a, b, line_b, row_b);
    } finally {
        _releaseReply ($in);
    }
  } // addition


  //
  public String get_help ()
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("get_help", true);
       $in = _invoke ($out);
       String $result = $in.read_string ();
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return get_help ();
    } finally {
        _releaseReply ($in);
    }
  } // get_help


  //
  public My_Math.Result multiplication (My_Math.My_Array a, int line_a, int row_a, My_Math.My_Array b, int line_b, int row_b)
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("multiplication", true);
       My_Math.My_ArrayHelper.write ($out, a);
       $out.write_long (line_a);
       $out.write_long (row_a);
       My_Math.My_ArrayHelper.write ($out, b);
       $out.write_long (line_b);
       $out.write_long (row_b);
       $in = _invoke ($out);
       My_Math.Result $result = My_Math.ResultHelper.read ($in);
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return multiplication (a, line_a, row_a, b, line_b, row_b);
    } finally {
        _releaseReply ($in);
    }
  } // multiplication


  //
  public My_Math.Result subtraction (My_Math.My_Array a, int line_a, int row_a, My_Math.My_Array b, int line_b, int row_b)
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("subtraction", true);
       My_Math.My_ArrayHelper.write ($out, a);
       $out.write_long (line_a);
       $out.write_long (row_a);
       My_Math.My_ArrayHelper.write ($out, b);
       $out.write_long (line_b);
       $out.write_long (row_b);
       $in = _invoke ($out);
       My_Math.Result $result = My_Math.ResultHelper.read ($in);
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return subtraction (a, line_a, row_a, b, line_b, row_b);
    } finally {
        _releaseReply ($in);
    }
  } // subtraction


  //
  public My_Math.Result transpose (My_Math.My_Array a, int line_a, int row_a)
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("transpose", true);
       My_Math.My_ArrayHelper.write ($out, a);
       $out.write_long (line_a);
       $out.write_long (row_a);
       $in = _invoke ($out);
       My_Math.Result $result = My_Math.ResultHelper.read ($in);
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return transpose (a, line_a, row_a);
    } finally {
        _releaseReply ($in);
    }
  } // transpose

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:My_Math/Interface_Math:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _Interface_MathStub
